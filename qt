//命名规范 以及 快捷键
// 类名 首字母大写 单词与单词之间 首字母大写
// 函数、变量  首字母小写 单词与单词之间 首字母大写
// 快捷键
// 运行  ctrl + R
// 编译  ctrl + B
// 查找  ctrl + F
// 帮助文档 F1
// 字体缩放  ctrl + 鼠标滚轮
// 自动对齐  ctrl + i
// 整行移动 ctrl+ shift + ↑ 或者 ↓
// 同名之间的 .h .cpp切换  F4
// 帮助文档 第一种 ： F1  第二种 ：左侧按钮  第三种：C:\Qt\Qt5.6.0\5.6\mingw49_32\bin
// 注释快捷键  ctrl + /
MyWidget::MyWidget(QWidget *parent)
    : QWidget(parent) //初始化列表
{
    //按钮
    QPushButton * btn = new QPushButton;
    //btn->show(); //show用顶层方式弹出，如果想在MyWidget窗口中显示，就需要依赖MyWidget窗口
    //设置父亲
    btn->setParent(this);

    //设置文字
    btn->setText("德玛西亚"); //将char* 隐式类型转为QString

    //创建按钮第二种方式  窗口会按照 btn2大小进行显示
    QPushButton * btn2 = new QPushButton("第二按钮",this);
    //重置窗口大小
    resize(600,400);

    //移动第二个按钮
    btn2->move(100,100);


    //按钮是否可以 重置大小resize？ 可以
    btn2->resize(50,50);


    //重置窗口标题
    setWindowTitle("Qt第一个窗口");

    //设置固定窗口大小
    setFixedSize(600,400);

    //一定程度下 简化了内存回收机制
    //创建自己的按钮
    MyButton * myBtn = new MyButton;
    myBtn->setText("我的按钮");
    myBtn->move(200,200);
    myBtn->setParent(this);

    //Qt坐标系
    //x为右侧正向  y 以 下侧为正向


    //点击 myBtn 关闭窗口
    //参数1  信号的发送者  参数2  发送的信号 参数3 信号的接受者 参数4 处理的槽函数
    //connect(myBtn,&MyButton::clicked , this , &MyWidget::close);
    connect(myBtn,&QPushButton::clicked , this , &QWidget::close);

}

#include "widget.h"

//需求：  创建两个类  Teacher 类  Student 类
// 下课后 老师Teacher zt  会发出一个信号   饿了
// 学生响应信号Student st  处理信号的槽函数  请客吃饭

Widget::Widget(QWidget *parent)
    : QWidget(parent)
{
    zt = new Teacher(this);
    st = new Student(this);

    //连接 老师和学生
    connect(zt,&Teacher::hungry,st , &Student::treat );

    //下课
    classIsOver();

}

void Widget::classIsOver()
{

    //触发老师饿了的信号
    //老师饿了的信号属于自定义信号，触发自定义信号关键字  emit
    emit zt->hungry();
}

QMainwindow
#include "mainwindow.h"
#include <QMenuBar>
#include <QToolBar>
#include <QLabel>
#include <QStatusBar>
#include <QDockWidget>
#include <QTextEdit>
MainWindow::MainWindow(QWidget *parent)
    : QMainWindow(parent)
{
    resize(600,400);

    // 包含菜单栏 只能有一个
    QMenuBar * bar =  menuBar();
    //将菜单栏放入到窗口中
    this->setMenuBar(bar);

    //创建文件菜单
    QMenu * fileMenu =  bar->addMenu("文件");
    QMenu * editMenu =  bar->addMenu("编辑");

    //添加菜单项
    QAction * newAction =  fileMenu->addAction("新建");
    // 添加分割线
    fileMenu->addSeparator();
    QAction * openAction =  fileMenu->addAction("打开");

    //工具栏  可以有多个
    QToolBar * toolBar = new QToolBar(this);
    addToolBar(Qt::LeftToolBarArea,toolBar); //默认停靠范围

    //只允许左右侧停靠
    toolBar->setAllowedAreas(Qt::LeftToolBarArea | Qt::RightToolBarArea );

    //设置浮动
    toolBar->setFloatable(false);

    //设置移动 （总开关）
    toolBar->setMovable(false);

    //工具栏添加菜单项
    toolBar->addAction(newAction);
    //添加分割线
    toolBar->addSeparator();
    toolBar->addAction(openAction);


    //状态栏 只能有一个
    QStatusBar * stBar = statusBar();
    setStatusBar(stBar);
    QLabel * label = new QLabel("提示信息",this);
    stBar->addWidget(label); //添加提示信息到左侧

    QLabel * label2 = new QLabel("右侧提示信息",this);
    stBar->addPermanentWidget(label2);


    //铆接部件 浮动窗口 可以有多个
    QDockWidget * dock = new QDockWidget;
    //添加铆接部件到 窗口中
    addDockWidget(Qt::BottomDockWidgetArea,dock);

    //设置停靠范围
    dock->setAllowedAreas(Qt::TopDockWidgetArea | Qt::BottomDockWidgetArea);


    //核心部件 只能一个
    QTextEdit * edit = new QTextEdit; //文本编辑框
    setCentralWidget(edit);
}
1QMainWindow
1.1菜单栏 QMenuBar * bar = MenuBar()  只能最多有一个
1.1.1把这个栏添加到 窗口中 setMenuBar
1.1.2添加菜单 addMenu（文件）
1.1.3文件里添加菜单项 addAction（新建） 返回QAction
1.1.4添加分隔符 addSeparator
1.2工具栏 可以有多个
1.2.1tBar =  new QToolBar
1.2.2addToolBar（ 默认停靠位置，tBar）
1.2.3设置 停靠、浮动、移动
1.2.4添加菜单项
1.3状态栏 statusBar  只能一个
1.3.1左侧添加 
1.3.2右侧添加
1.4铆接部件 可以多个
1.4.1QDockWidget
1.4.2addDockWidget（默认位置，。。）
1.4.3设置后期的停靠位置
1.5核心部件  只能一个
1.5.1setCentralWidget
2添加资源文件
2.1首先将资源导入到项目中
2.2右键项目 -  添加新文件 – Qt  - Qt Resource File 
2.3给资源起名称 res
2.4Qt会生成res.qrc 文件
2.5右键res.qrc  open in Editor
2.6添加前缀 
2.7添加文件
2.8使用 “ : + 前缀名 + 文件名 ”
2.9可以设置别名，但是不建议，因为设置别名，原来的方式就不可用了
3对话框
3.1模态对话框
3.1.1Dialog dlg
3.1.2dlg.exec() 阻塞功能
3.2非模态对话框
3.2.1Dialog dlg
3.2.2dlg.show() 会一闪而过 所以创建在堆上
3.2.3new dlg dlg->show()
3.2.4设置属性 55号 setAttribute（Qt::WA_DeleteOnClose）
4QMessageBox
4.1错误、信息、警告、问题
4.2问题 5个参数
4.2.11 父亲 2 标题 3 显示内容 4 按键类型 5 默认关联回车按键
5QFileDialog  
5.1getOpenFileName（父亲，标题，默认路径，过滤文件格式）
5.2返回值是文件路径
6QColorDialog 
6.1getColor（ 默认色 QColor(r,g,b)）
6.2返回值 QColor 
7界面布局
7.1登陆窗口
7.2水平布局 和 垂直布局
7.3默认widget和控件之间有9像素的间隙
7.4灵活运用弹簧
8控件
8.1按钮组
8.1.1QPushButton 可以加Icon
8.1.2QToolButton 主要显示Icon，想显示图片和文字 ，修改属性toolButtonStyle
8.1.2.1自带效果 透明效果 autoRaise
8.1.3QRadioButton
8.1.3.1setChecked 设置默认选中
8.1.3.2监听clicked信号
8.1.4QCheckButton
8.1.4.1statusChanged 状态改变 0 未选中 1 半选 2 全选
8.2ListWidget
8.2.1QListWidgetItem * item = new … (“诗词”)
8.2.2ui->listWidget->addItem(item);
8.2.3设置对齐方式 item->setTextAlignment(Qt::AlignHCenter);
8.2.4addItems( QStringlist)
8.3TreeWidget
8.3.1设置头
8.3.2ui->treeWidget->setHeaderLabels(QStringList() << "英雄"<<"英雄介绍");
8.3.2.1设置具体内容
8.3.3创建顶层的item
8.3.3.1QTreeWidgetItem * liItem = new …
8.3.3.2ui->treeWidget->addTopLevelItem(liItem);
8.3.4设置子节点
8.3.4.1addChild()
8.4TableWidget
8.4.1设置列数
8.4.2设置头 姓名 性别 年龄
8.4.3设置行数
8.4.4设置正文  setItem（row,col,QTableWidgetItem）
8.4.5添加赵云
8.4.5.1判断是否为空
8.4.5.2为空 添加 insertRow
8.4.6删除赵云
8.4.6.1判断是否为空
8.4.6.2先确定赵云所在的row
8.4.6.3removeRow
8.5其他常用控件
8.5.1stackedwidget 栈容器
8.5.1.1设置所以 setCurrentIndex
8.5.2下拉框
8.5.2.1addItem添加项目
8.5.3利用QLabel显示图片
8.5.3.1setPixmap(QPixmap(“文件路径”))
8.5.4利用QLabel显示gif图片
8.5.4.1    	QMovie * movie = new QMovie(":/Image/mario.gif");
8.5.4.2    ui->label_gif->setMovie(movie);
8.5.4.3    movie->start();

#include "mainwindow.h"
#include "ui_mainwindow.h"
#include <QDebug>
#include <QDialog>
#include <QMessageBox>
#include <QColorDialog>
#include <QFileDialog>
MainWindow::MainWindow(QWidget *parent) :
    QMainWindow(parent),
    ui(new Ui::MainWindow)
{
    ui->setupUi(this);

    //点击新建菜单项 弹出对话框
    connect(ui->actionNew,&QAction::triggered,this,[=](){
        //对话框  有两种
        // 模态对话框 （不可以对其他窗口进行操作） 非模态对话框 （可以对其他窗口操作）
    //        QDialog dlg(this);
    //        dlg.resize(200,100);
    //        dlg.exec(); //阻塞

    //        qDebug() << "弹出对话框！";

        //非模态对话框创建
         //QDialog dlg2(this); 创建到栈上 一闪而过
//        QDialog * dlg2 = new QDialog(this);
//        dlg2->resize(200,100);
//        dlg2->show();
//        //需要设置属性 dlg2   55号
//        dlg2->setAttribute(Qt::WA_DeleteOnClose);

        //使用标准对话框  QMessageBox
        //错误对话框
        //QMessageBox::critical(this,"错误！","critical");
        //信息对话框
        //QMessageBox::information(this,"信息","info");

        //询问对话框
        // 参数1 、父亲 2、标题 3、提示内容  4 按键类型 5 关联回车按键
//         if(QMessageBox::Save == QMessageBox::question(this,"问题","question",QMessageBox::Save | QMessageBox::Cancel,QMessageBox::Cancel))
//         {

//            qDebug() << "点击的是保存";
//         }
//         else
//         {
//            qDebug() << "点击的是取消";
//         }

         //警告对话框
         // QMessageBox::warning(this,"警告！","warning");

        //选择颜色对话框
//        QColor color =  QColorDialog::getColor(QColor(255,0,0));
//        qDebug() << color.red() << color.green() << color.blue();

        //文件对话框
//        QString path =  QFileDialog::getOpenFileName(this,"打开文件","C:\\Users\\zhangtao\\Desktop","(*.txt *.png)");
//        qDebug() << path;
    });



}

#include "widget.h"
#include "ui_widget.h"
#include <QDebug>
Widget::Widget(QWidget *parent) :
    QWidget(parent),
    ui(new Ui::Widget)
{
    ui->setupUi(this);


    //单选按钮 默认选中 男
    ui->rBtnMan->setChecked(true);

    //点击女的 就打印选中了
    connect(ui->rBtnWoman, &QRadioButton::clicked,[=](){
        qDebug() << "选中女的了！";
    });


    //多选框  选中后打印内容
    //选中2  未选中 0   tristate 1状态
    connect(ui->checkBox,&QCheckBox::stateChanged,[=](int state){
        qDebug() << state ;
    });

    //利用listWidget 写诗
//    QListWidgetItem  * item = new QListWidgetItem("锄禾日当午");

//    //设置对齐方式
//    item->setTextAlignment(Qt::AlignHCenter);
//    ui->listWidget->addItem(item);

    //QStringList ===  QList<QString>
    QStringList list;
    list << "锄禾日当午"<< "汗滴禾下土"<< "谁知盘中餐"<< "粒粒皆辛苦";
    //QStringList()<<"锄禾日当午"<< "汗滴禾下土"<< "谁知盘中餐"<< "粒粒皆辛苦" 匿名对象也可以直接使用
    ui->listWidget->addItems(list);
}
#include "widget.h"
#include "ui_widget.h"
#include <QMessageBox>

Widget::Widget(QWidget *parent) :
    QWidget(parent),
    ui(new Ui::Widget)
{
    ui->setupUi(this);

    //QTableWidget控件使用
    //告诉控件 一共有多少列
    QStringList list;
    list << "姓名"<< "性别"<< "年龄";
    ui->tableWidget->setColumnCount(list.size());
    //设置水平头
    ui->tableWidget->setHorizontalHeaderLabels(list);

    //设置行数
    ui->tableWidget->setRowCount(5);

    //设置正文
    //ui->tableWidget->setItem(0,0,new QTableWidgetItem("亚瑟"));

    //准备数据
    QStringList nameList;
    nameList << "亚瑟"<< "妲己"<< "安琪拉"<< "东皇太一"<< "李白";

    QList<QString> sexList;
    sexList << "男" << "女"<< "女"<< "男"<< "男";


    for(int i = 0 ; i < 5;i++)
    {
        int col = 0;
        ui->tableWidget->setItem(i,col++,new QTableWidgetItem(nameList[i]));
        //添加性别
        ui->tableWidget->setItem(i,col++,new QTableWidgetItem(sexList.at(i)));
        //添加年龄
        //int 转 QString    number
        ui->tableWidget->setItem(i,col++,new QTableWidgetItem( QString::number(i+18)));

    }


    //点击按钮 添加赵云
    connect(ui->addBtn,&QPushButton::clicked,[=](){
        //先判断有没有赵云，有不添加，没有才添加
       bool isEmpty = ui->tableWidget->findItems("赵云",Qt::MatchExactly).empty();

       if(isEmpty)
       {
            ui->tableWidget->insertRow(0);
            ui->tableWidget->setItem(0,0,new QTableWidgetItem("赵云"));
            ui->tableWidget->setItem(0,1,new QTableWidgetItem("男"));
            ui->tableWidget->setItem(0,2,new QTableWidgetItem( QString::number(20)));
       }
       else
       {
            QMessageBox::warning(this,"警告！","赵云有了！");
       }
    });

    //点击按钮 删除赵云
    connect(ui->delBtn,&QPushButton::clicked,[=](){
        bool isEmpty = ui->tableWidget->findItems("赵云",Qt::MatchExactly).empty();
        if(isEmpty)
        {
            QMessageBox::warning(this,"警告！","赵云没有了！");
        }
        else
        {
            //先找到赵云所在的行
           int row = ui->tableWidget->findItems("赵云",Qt::MatchExactly).first()->row();
           //找到行数  删除掉
           ui->tableWidget->removeRow(row);
        }
    });



}

#include "widget.h"
#include "ui_widget.h"
#include <QMovie>
Widget::Widget(QWidget *parent) :
    QWidget(parent),
    ui(new Ui::Widget)
{
    ui->setupUi(this);


    //设置默认选中第0项
    ui->stackedWidget->setCurrentIndex(0);

    //stackWidget
    connect(ui->btnScroll,&QPushButton::clicked,[=](){
        ui->stackedWidget->setCurrentIndex(0);
    });

    connect(ui->btnTab,&QPushButton::clicked,[=](){
         ui->stackedWidget->setCurrentIndex(1);
    });

    connect(ui->btnToolBox,&QPushButton::clicked,[=](){
         ui->stackedWidget->setCurrentIndex(2);
    });


    //下拉框使用
    ui->comboBox->addItem("奔驰");
    ui->comboBox->addItem("宝马");
    ui->comboBox->addItem("拖拉机");

    //点击拖拉机按钮
    connect(ui->btnChoose,&QPushButton::clicked,[=](){
        ui->comboBox->setCurrentText("拖拉机");
    });

    //利用QLabel显示图片
    ui->img->setPixmap(QPixmap(":/Image/Luffy.png"));

    //利用QLabel显示gif图片
    QMovie * movie = new QMovie(":/Image/mario.gif");
    ui->movie->setMovie(movie);
    //播放gif
    movie->start();
}
