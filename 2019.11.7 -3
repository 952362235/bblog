effective stl 44
第四十四条 容器的成员函数优先于同名的算法
两个理由 1.成员函数往往速度快
2.成员函数与容器结合的更加紧密，这是算法所不能比的，原意在于算法和成员函数虽然有同样的名称，但他们所做的事情往往不完全相同。
关联容器 set<int>包含100w个int，知道727是否在其中，第一次出现的位置
set<int> s;
1. set<int>::iterator i = s.find(727);
2. set<int>::iterator i = find(s.begin(), s.end(), 727);
find成员函数大概40次（最坏情况） 平均20次
find算法 100w次（最坏情况） 50w次（平均情况）
大多数stl中关联容器的底层实现会选用红黑树结构，搜索100w元素值的集合所需要的最大比较次数为38.（实践中完全平衡树的性能略低于红黑树）
find算法查找的是容器中是否存在于727等值的元素，find成员函数则是搜索容器中是否有等价于727的元素。
对于map和multimap容器而言。成员函数与stl算法的行为差异更是至关重要的，因为map和multimap容器包含的实际上是pair对象，而他们的成员函数只检查每个pair对象的键部分。
而算法统计键和值的部分。
在list中性能差距是最重要的因素。算法无一例外的需要复制list容器中的对象，而成员函数无需任何对象副本。
还有一点，list成员函数的行为与同名的算法的行为不同。
