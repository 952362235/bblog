储存器
1.按储存器介质分类
2.按存取方式分类  a随机存取存储器 RAM 在随机存取存储器中存取信息，存取时间和存储位置没有关系 SRAM高速缓存存储器 DRAM主存
b只读存储器 ROM 内容只能随机读出而不能写入。 MROM掩膜型只读存储器 PROM可编程只读存储器 EPROM 可擦除只读存储器 EEPROM电可擦除可编程只读存储器 Flash Memory 快擦除读写存储器
随机存取是表示可以随时访问存储器的任意单元地址，就好像数组可以通过下标直接访问需要的元素，而链表就需要一个一个的找过去，因此数组是随机存取，而链表不是随机存取。
ROM确实可以算是随机存取存储器，因为ROM就是采用随机存取方式访问信息，但随机存取存储器一般定义是必须要满足可以随即进行存和取，ROM只能进行取操作，而不能进行存操作。因为一般将RAM和ROM分开
c 串行访问存储器 存储器对存储单元进行读写操作时，需要按照物理位置的先后顺序进行依次访问，主要包括顺序存取存储器（磁带）和随机存取存储器（磁盘）。
3.按计算机中的作用分类  主存 辅存 缓冲存储器
性能指标 容量=字数*字长 单位成本=成本/容量 存储速度=数据宽度/存储周期
1.半导体存储芯片的基本结构  2半导体的译码驱动方式 两种 线选法和重合法
1.线选法（单译码） 2重合法（双译码）
存储器的工作分为三大部分：保持存储信息，读数据和写数据
1.SRAM 六管静态MOS存储单元电路
读周期指对芯片两次连续读操作的最小时间间隔；读时间表示进行一次存储器读操作的时间，显然读时间小于读周期。
写周期指对芯片两次连续写操作的最小时间间隔；写时间表示进行一次存储器写操作的时间，显然写时间小于写周期。
DRAM的刷新：采用电容式存储，充满电荷，但是电容中的电荷不能永久保留，默认2ms，即每个基本存储单元做每2ms内必须刷新一次，否则就会使电荷流失，进而导致存储信息出错。
三种刷新方式1.集中刷新 吧刷新操作集中到一段时间内集中进行（集中歼灭）
2.分散刷新 把刷新操作分散进行，周期性的进行（分散歼灭）
3.异步刷新，是一个这种方案，既不会像集中刷新那么大费周章，产生集中的固定时间，也不会像分散刷新那么频繁的刷新，而是有计划的刷新，师姐分配十分合理。
由于存储体是矩阵形势，因此每次刷新都是对行进行刷新。
刷新的实质就是读出后再按原样写入。
默认刷新操作是一个存储周期，若说明了刷新操作由读写一起进行，那么刷新一行的时间按两倍的周期算。
集中刷新中 刷新的时间是不能进行读写操作的，故称死时间或者访存死区。
分散刷新中， 存储周期=读或写周期+刷新一行的时间
异步刷新  刷新被平均分配了 所以死时间就是一个读/写周期。
缩短死时间的方式有很多种，如CPU指令译码阶段进行刷新
刷新是按行进行，每一行中记忆单元同时被刷新，仅需要行地址，不需要列地址。刷新行号由DRAM芯片的刷新控制电路中的刷新计数器产生。整个存储器中的所有芯片的相同行同时刷新，所以不是一个一个芯片按顺序进行，而是单个芯片的所有航按顺序定时一行一行进行的。
只有动态RAM才需要刷新
删存档写操作必须在空白区域进行，如果目标区域已经有数据，必须先擦除后写入，而读操作不需要如此，所以闪存的读速度比写速度快。
存储器容量的扩充 三类 位扩充 字扩充 字位扩充
a*b中a是字线，连接的是地址线；b是位线，连接的是数据线。
1.位扩充（b） 指的是增加存储字长 列入现在将1k*4位的芯片组成1k*8位的寄存器
a.需要几片芯片？ 2片
b.需要多少根地址线 a是字线，所以地址线的数量只跟a有关，2^10=1k 需要十根
c.需要多少根数据线 8代表8位 八根数据线
2.字扩充（a） 增加储存单元的个数 列如将1k*8的芯片组成2k*8的寄存器
a.需要几篇芯片 2片
b.需要多少根地址线 2^11=2k 需要11根地址线
c.需要多少根数据线 8根数据线
3.字位扩充  一定是先进行位扩充，再进行字扩充。
单体多字存储器 前提 指令和数据做主存内必须连续释放，遇到转移指令或者操作数不能连续存放 就无法使用了。
多体并行存储器 高位交叉编址的多体存储器（顺序存储）和低位交叉编址的多体存储器（交叉存储）
对于连续字的成块传送，低位交叉编址的多体存储器可以实现多模块流水线式并行存取，大大提高存储器的带宽。cpu比主存速度快，如果能同时从主存取出n条命令，必然提高机器的运行速度。
前提 模块的字长等于数据总线的宽度，假设模块存储周期为T，总线传送周期为t，且存取器由m个模块组成，为了实现流水方式存取，满足T=mt
采用低位交叉编址的多体存储器 连续读取n个字所需要的时间t1=T+（n-1）t   高位较差编址 t2=nT
高位交叉编址中的并行体现在不同的请求源并行地访问不同的体，低位较差编址中的并行提现做统一请求源并行地访问不同的体。
一般来说要求访问的请求资源很多，而且访问都是随机的，这样就有可能做同一时刻出现多个请求源访问同一个存储体。为了防止发生两个或两个以上的请求源同时占用同一个存储体，并防止将代码错送到另一个请求源等错误的发生，需要设置一个排队器，由它来确定请求源的优先级别。规则：cache访存的优先级最高，其次是严重影响cpu工作的请求源。
cache依靠局部性原理：通过大量典型程序的分析，发现cpu从主存取指令或取数据，在一定时间内，只是对主存局部地区区域的访问。人们把cpu近期的需要放到cache。
cache一般采用SRAM制作，主存使用DRAM。  局部性原理：时间局部性和空间局部性
命中率=cpu要访问信息做cache中的比例
平均访问时间：如果命中率为h，tc为命中时访问cache的时间，tm为未命中的主存访问时间，ta=htc+（1-h）tm
cache-主存系统效率 e=tc/ta
cache的命中率只和cache的容量，cache的字块长度有关。
cpu和cache之间传送数据的基本单位是字，而主存和cache直接传送数据的基本单位是块（一块包括多个字）
cpu访问主存的时候，会将地址同时送给cache和主存，cache控制逻辑根据地址判断此字是否做cache中，如果做cache中，立刻传给cpu，否则用主存读周期把此字从主存读出并送到cpu。同时，把含有这个字的整个块从主存取出并送到cache中。
地址映射变换机构  替换机构
cache虽然是存储器但是存放的是主存信息的副本，所以并不能增加系统的存储容量。
地址映射变换机构是将CPU送来的主存地址转换为cache地址。由于主存和cache块大小相同，块内地址都是相对于块的起始地址的偏移量（即低位地址相同）因此地址变换主要是主存块号与cache块号之间的转换。三种方式
1.直接映射 i=jmodC  i是cache的块号 j是主存中的块号 C是cache的块数
缺点 1.不够灵活 2.冲突概率高（抖动） 某个块频繁的交换   适用大容量cache
2.全相联映射 允许主存中的每一个字块映射到cache中的任何一块的位置上。需要一个标记为来识别组号。
优点：1 每个字块映射到cache中的任何一个字块，提高了cache的命中率  2 减少了块的冲突率，提高了cache的利用率
缺点 tag的位数增加了，访问cache时主存的字块标记需要和cache的全部标记进行比较，才能判断出所访问主存地址的内容是否在cache内，这种比较通常采用按内容寻址的相联存储器来完成。
适用小容量的cache
3.组相联映射 是直接相联和全相联映射的这种方式。i=jmodQ q为cache的组数
当组相联只有一组时候，就相当于全相联映射，每组只有一块时，就相当于直接映射。
主存地址高位到低位划分为3个部分：标记tag，组号和块内字地址。
块内字地址=log2（块大小）  组号=log2（cache组数）   标记tag=主存地址的剩余位
主存中不同区的相同序号的组合cache同序号的组采用直接映射，主存和cache同序号的组内各块采用全相联映射，不同序号的组没有映射关系。
在直接映射方式下，一个给定的主存块只能放到一个唯一的固定cache槽中，所以做对应cache槽中已有一个主存块的情况下，新的主存块毫无选择的把原先已有的那个主存块替换掉，因而无需考虑替换算法。
替换算法：1.先进先出FIFO算法   2.随机法  3.近期最少使用算法LRU  利用了局部性原理，只记录每个块最近一次使用的时间。
写操作策略：由于cache的内容只是主存部分内容的副本，因此它应当与主存内容保持一致。而CPU对cache的写入更改了cache的内容，就会导致cache的内容和主存的内容不一致。保持一致就是写操作，有三种方式。
1.写回法：当cpu写cache命中时，只修改cache的内容，而不立即写入主存，只有当此行被换出时才写回主存，这种方式可以减少访问主存的次数。如何知道此块被修改过了，是实现的方式是每行都设置一个修改位。来决定是写回主存还是丢弃。
若不命中 但字不在cacke中，需要从主存中找出包含此字的数据库，cpu不会做主存直接修改，而是找到之后复制到cache进行修改，等cache换出此块时，再复制到主存。
2.全写法  命中时，cache和主存同时修鞋该，未命中时，直接在主存中修改。
3.写一次法 这种方式，写命中和写不命中方法与写回法基本相同，仅仅第一次写命中时要同时写入主存。
虚拟存储器的容量由计算机地址总线的数量来决定。
页式虚拟存储器 基本单位为页，且将主存的物理空间划分为与虚拟存储器等长的页。划分的页叫页面。主存的页叫实页，虚拟存储器的页叫虚页。
系统基本信息的传送单位是定长的页，需要通过地址变换机构实现访存过程，当访问页面不存在主存时，通过页面置换算法将需要的页面调入主存。
优点：由于页面起点和终点是固定的，因此页表简单，调入方面，主存空间浪费小 。
缺点：页面不是逻辑上的独立实体，因此处理，保护和共享都不如段式虚拟存储器方便。
段式虚拟存储器是一种将主存按段分配的存储管理方式，各段的长度因程序而异。段是利用程序的模块化性质，按照程序的逻辑结构划分成多个相对独立的部分。
有点：段的分解和程序相对应；段的逻辑独立性使他易于编译，管理，修改，保护，多道程序共享；某些段具有动态可变长度，允许自由调度以便于有效使用主存空间。
确定：长度不同，给空间分配带来麻烦，而且容易做段间留下许多空余和不易利用的空间，造成浪费。
段页式虚拟存储器 是两者的结构，把程序按逻辑单位分段后，再把段分成固定大小的页。程序对主存的调入调出是按页面进行的，但它又可以按段实现共享和保护。
优点：兼备页式虚拟存储器和段式虚拟存储器的优点  缺点：在地址映射过程中需要多次查表。
TLB快表  做虚拟内存中，如果不采取有效措施，会让访问主存的速度大大降低，因为首先要查表。为了加快查找速度，利用局部性原理讲页表分文块表和慢表。
两个转换关系  逻辑地址（虚拟地址）-> 物理地址 -> 最终地址（cache中的地址）
逻辑地址通过查表转换成物理地址，tlb命中直接输出tlb的页表项查询得到物理地址，tlb不命中根据页表输出物理地址。但是此时的物理地址并不一定是最终地地址，因为如果cache命中，需要再转换成cache地址，如果不命中就经过tlb得到的地址去直接访存。
命中一致性：如果tlb命中，那么页表必然命中，且该页面一定做内存中，因为tlb命中说明此页面可以做也表中查询得到，就说明页面已经掉入内存。而此页是否做cache不确定。
cpu执行一次存储访问操作最少访问主存几次？
1.根据虚拟页号查找快表，若快表有对应的虚页的页表项，则取出页框号形成物理地址，转第二步，若快表中不存在对应虚页的页表项，则发生tlb缺失，转第三步。
2.判断物理地址中的标记是否和cache中的标记相等且有效位是否为1，若为1，则cache命中，从cache中读取数据或写数据到cache；若不为1，则发生cache缺失，转第四步。
3.当tlb缺失，根据页表几只寄存器的值和虚页号找到主存中的页表项，判断有效位是否为1，若是，则说明虚页在主存中，此时把该页表转入TLB中，并去除页框号形成物理地址，转第二步。
若不是，说明该虚页不在主存中，即发生了缺页异常。此时需调出操作系统中的缺页异常处理程序，实现从磁盘读入一个页面的功能。缺页处理结束后，重新执行当前指令，这次一定可以在主存中找到。
4.cache缺失时，cpu根据物理地址到主存读一块信息到cache，然后读入到cpu或cpu写信息到cache中。
从上述过程来看，cpu进行一次存储访问，最好情况是无须访问主存，最坏情况多次访问主存，还要读写磁盘数据。
TLB和页表都不命中，则数据就不在主存在，所以必定会导致cache访问不命中。
快表缺失，cache缺失和页面缺失（缺页）
快表缺失可以用软件也可以用硬件来处理。首先根据虚页号和页表基址寄存器的内容到主存中找到相应的页表项，若有效位为1，则把该项取到块表中即可；若有效位为0，则发生缺页异常。
用软件实现时，通过产生一个快表缺失异常，调出操作系统中相应的异常处理程序，异常结束后，重新执行当前指令。
cache确实又硬件实现的。当发生cache缺失时，cpu使当前指令阻塞，并根据主存地址继续到主存中去访问主存块，从主存中取到信息后指令继续执行。
页面缺失除了由软件实现的。缺页时，，需要调出操作系统中的缺页异常处理程序进行处理，实现从磁盘读入一个页面的功能呢。缺页处理结束后，重新执行当前指令。
硬盘存储器的记录数据方式有六类 。1归零制RZ  2 不归零制NRZ 见变就翻  3见1就翻的不归零制NRZ1
硬盘存储器的技术指标有哪些 1.记录密度 道密度指磁盘沿半径方向单位长度的磁道数（单位长度内有多少个同心圆）相临磁道之间的距离成为道距。
位密度（或称线密度）指单位长度磁道能记录二进制信息的位数。
磁盘的所有磁道记录的信息量一定是相等的，并不是圆越大记录的信息越多。既然大圆小圆记录的信息一样多，那么每个磁道的位密度都是不同的（圈大密度小）
2存储容量 C=n*k*s C是总容量 n是盘面数 k是磁道数 s是每条磁道上二进制代码数
3平均寻址时间 寻址时间需要分为两部分 寻道时间和等待时间  但是寻道和等待时间不同 所以 平均寻址时间=（最大寻址时间+最小寻址时间）/2+(最大等待时间+最小等待时间)/2
4.数据传输率
5.误码率
硬盘存储器之记录介质为硬质圆形盘片的磁表面存储设备。由磁记录介质，磁盘控制器和磁盘驱动器三大部分组成。
如果文件长度超过一个磁道的容量，那么应将它记录在同一个柱面上，因为不用重新寻道，所以数据读写速度快。
台号  磁道号  盘面号  扇区号
RAID指多个小容量磁盘代替一个大容量的磁盘。分为7级，0到6 不代表技术差异，仅仅表示RAID架构方式和提供的功能不一样。
RAID0写入式将资料分成书小块，送到不同磁盘内存储，读取事从不同磁盘内读取，重新组合。
RAID1 镜像备份
扇区是磁盘的最小编制单位。
磁面号=磁头号  柱面号=磁道号 
SRAM读后不需要刷新，而DRAM读后需要刷新。
如果某个存储单元所存储的信息被读出时，原存信息被破坏，则称为破坏性读出；如果读出时，原信息不被破坏，则称为非破坏性读出。破坏性读出的存储器，每次读出后紧跟着一个重写（再生）操作。
刷新是所有芯片的某行同时被刷新，在考虑刷新问题时，应当从单个芯片的存储容量着手，而不是整个存储器。
处理机字长是指处理机能同时处理（或运算）的位数，即同时处理多少位（bit）数据。处理器的字长越大，说明它的运算能力越强。比如我们的笔记本电脑，现在一般都是64位的电脑，这也就是说我们的电脑一次可以处理8个字节。如果讲处理器的寻址范围，则要看处理器的地址总线的位数，而不是它的字长！目前主流的64位处理器的数据总线为64位，地址总线大部分是32位，这也就是为什么有些人称现在的64位笔记本是伪64位电脑一说的来源。这个清楚之后，再看地址总线与寻址范围的关系。存储单元是以字节（byte）为单位，N根地址总线能访问2的N次方个存储单元。于是有32位地址总线可以访问2的32次方个存储单元，即4GB。 8086处理器字长是16位，它的地址总线是20位，所以能访问2的20次方个存储单元，即1MB。
另外一点需要注意的就是，如果有些题目说：按“字”寻址，就说明是存储单元大小为字长的位数，按“字节”寻址，说明存储单元是字节的大小。

下面通过举几个例子，来说明这些关系

1、某计算机字长32位，存储容量8MB。按字编址，其寻址范围为(0～2M - 1) 计算步骤：8MB字节 = 8 * 1024 * 1024 * 8位。所以8MB / 32位 = 2M.

2、某计算机字长32位，其存储容量为4MB，若按半字编址，它的寻址范围是（0 - 2M - 1）计算步骤：若按半字就是16位了 4MB = 4 * 1024 * 1024 * 8位，所以4MB / 16 = 2M；

3、若内存容量为4GB，字长为32，求地址总线和数据总线的宽度？          解析：数据总线的宽度 = 字长；         地址总线的宽度 = 寻址范围（即内存容量） = 4GB = 2 ^ 32B，所以本题的答案为：数据总线宽度为32，地址总线宽度为32。

4、某机字长32位，存储容量1MB，若按字编址，它的寻址范围是什么？

解释：容量1M = 2 * 1024 * 1024 位 = 2 ^ 20      一个字长是32 位
所以，寻址范围是二者相除 = 256K

5、地址编号从80000H到BFFFFH且按字节编址的内存容量为——KB，若用16K * 4bit的存储器芯片构成该内存，共需——片？

解析：由题意可知该地址的大小为：BFFFFH - 80000H = 40000H，将其换算为二进制则为：2 ^ 18 B = 2 ^ 8K = 256K，第一问即为256K；

由于第二问的单位为 bit，所以将单位统一后相除，即 256K * 8bit / 16K * 4bit = 32片

6、设用2K * 4位的存储器芯片组成16K * 8位的存储器（地址单元为0000H~3FFFFH，每个芯片的地址空间连续），则地址单元 0B1FH 所在的芯片的最小地址编号为——？ A 0000H   B 0800H   C 2000H   D 2800H

解析：由题意可知地址单元的大小为：3FFFFH - 0000H = 4000H，同时可知共需要8段（16片）存储芯片来组成该存储器。将地址单元换算为二进制数表示：0000 1011 0001 1111B，将选项依次换算为二进制可得B选项与该地址单元最接近并且小于它，0000 1000 0000 0000B，故答案为B 0800H。



－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－

地址总线宽度决定了CPU可以访问的物理地址空间，简单地说就是CPU到底能够使用多大容量的内存。

数据总线负责整个系统的数据流量的大小，而数据总线宽度则决定了CPU与二级高速缓存、内存以及输入 / 输出设备之间一次数据传输的信息量。


－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－

按总线的功能(传递信息的内容)分类，计算机中有三种类型的总线，即传送数据信息的数据总线、传送地址信息的地址总线和传送各种控制信息的控制总线。
1.数据总线
数据总线是CPU与存储器、CPU与I / O接口设备之间传送数据信息(各种指令数据信息)的总线，这些信号通过数据总线往返于CPU与存储器、CPU与I / O接口设备之间，因此，数据总线上的信息是双向传输的。
2.地址总线
地址总线上传送的是CPU向存储器、I / O接口设备发出的地址信息，寻址能力是CPU特有的功能，地址总线上传送的地址信息仅由CPU发出，因此，地址总线上的信息是单向传输的。
3.控制总线
控制总线传送的是各种控制信号，有CPU至存储器、I / O接口设备的控制信号，有I / O接口送向CPU的应答信号、请求信号，因此，控制总线是上的信息是双向传输的。控制信号包括时序信号、状态信号和命令信号(如读写信号、忙信号、中断信号)等。
采用指令cache和数据cache分离的主要目的是 减少指令流水线资源冲突。
