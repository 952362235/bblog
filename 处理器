指令系统
一个计算机只能执行自己指令系统的指令，对于其他系统的指令它完全看不懂：因此说指令系统就是计算机的机器语言。
一调指令应该由操作码和地址码两个部分组成。
操作码分为定长操作码和不定长操作码（扩展操作码或变长操作码）一般将操作码防止每条指令的前一个字节或前多个字节，当读出操作码后就可以马上判定，这是一条零地址指令还是单操作指令或双操作指令。
地址码（操作数字段）1.需要指出操作数的地址 2.指出操作后结果存放的地址 3.下一条指令的地址。
地址码可以是操作数本身，操作数地址或操作时地址的计算方法。根据指令中操作数地址码字段的数码不同，分为几类
1.零地址指令 只给出操作码字段op 没用地址码
2.一地址指令 地址码字段只有一个
3.二地址指令 
4三地址指令  两个源操作地址 一个运算结果地址  四次访存 取值 取操作数两次  存放结果
5.四地址指令 加了一条下一跳地址指令 
指令字长取决于操作码的长度，操作数地址的长度，以及操作数地址的个数。
计算机中的某一个字表示的是一个数据，则此字被称为数据字；如果计算机中的某一个个字表示的是一条指令，则此字就是指令字。
设计操作码指令格式时，注意1.不允许较短的操作码是较长操作码的前缀。 2.各条指令的操作码一定不可以重复。
指令寻址方式是指指令或者操作数有效地址的寻找方式，主要分为数据寻址和指令寻址两大类。
（PC）表示寄存器PC的数值。指令的地址码字段往往不是操作数的真实地址，而是形式地址，用A表示，（A）即操作数形式地址所执行的存储介质的数值。用形式地址解和指令的寻址方式可以计算出操作数的真实地址，即有效地址，用EA表示，（EA）表示有效地址所指向储存介质的数值，亦即操作数。
1.指令寻址：找到下一条将要执行指令的地址称为指令寻址。指令基本上按执行顺序存放在主存中，执行过程中，指令总是从内存单元被取到指令寄存器IR中。
两种方式：顺序执行时，用指令计数器（PC）+1来得到下一条指令的地址；跳转执行时，通过转移指令的寻址方式，计算出目标地址，送到PC中即可。
目标转移地址的形成方式主要由3种：立即寻址（直接地址），相对寻址（相对地址）和间接寻址（间接地址）。
2.数据寻址：找到当前正在执行指令的数据地址，称为数据寻址。开始时，数据被存放在内存中，但在指令执行过程中，内存的数据可能被装入到CPU的寄存器中，或者内存的堆栈曲中，还有的操作数可能是I/O端口中的内容，或本身就包含在指令中（即立即数）。
运行的结果也可能要放在多个地方，所以数据的寻址要设计寄存器 内存单元 堆栈等。此外操作数可能是某个一维或者二维数组的元素，因此还要考虑如何提供相应的寻址地址。综上数据的寻址比指令的寻址要复杂的多。
数据寻址由多种方式，为了区别各种不同的方式，在指令字中通常设一个字段，用来指明属于何种寻址方式。  操作码 寻址特征 形式地址（A）
1立即寻址 直接给出操作数   op # A  A不是操作数的地址，就是操作数本事。通常把#放在立即数签么，以表示立即寻址。
优点：只需要取出指令 ，便可以立刻获得操作数。采用立即寻址特征的指令只需在取指令时访问存储器，而在执行阶段不必再访问存储器。
缺点：由于A就是立即数，因此A的位数限制了立即数的表示范围
用途1；传送一个循环次数给专用寄存器，则可以使用立即寻址直接将循环次数作为立即数送入。
用途2：需要将某个程序的首地址送入程序计数器中，而且程序的首地址可以看作一个操作数，则可以用立即寻址将首地址作为立即数送入。
用途总结：立即寻址方式通常用于对某寄存器或内存单元赋初值
2.直接寻址 直接给出地址
优点：寻找操作数非常简单，因为直接给出了操作数的有效地址，而不需要经过某些变换。
缺点 A位数比较小
3.隐含地址 不明显给出操作数地址，其操作数隐含在操作码或者某个寄存器中
4.间接寻址 给出的地址是操作数有效地址的地址 又分为一次寻址和多次寻址  多次寻址比一次寻址的地址少一位。
优点：便于子程序的返回和查表
缺点：多次访问寄存器
拥堵 寻找中断服务程序的入口就是间接寻址 类似于查表。 子程序返回
5.寄存器寻址 地址码字段直接给出寄存器编号  EA=Ri
优点1.操作数在寄存器中，不需要访存，减少了执行时间 2.减少了指令字的长度
6.寄存器间接寻址  寄存器的内容不是操作数，而是操作数所在所在主存单元的地址号 EA = （Ri）
7.基址寻址 通过某个基础地址，需要设置一个基址寄存器，其操作数的有效地址EA=指令字中的形式地址A与基址寄存器中的内容（基地址）相加。基址寄存器有显示和隐式里昂中。
优点：1扩大操作数的寻址范围  2.便于解决多道程序问题    EA =A + (BR)
注意1.基址寄存器的内容由操作系统缺点，在程序的执行过程中不能由用户随意改变。
2.虽然基址寄存器的内容不可以由用户改变，但是当采用通用寄存器组来作为基址寄存器时，用户有权知道到底使用了哪个通用寄存器作为基址寄存器。
8.变址寻址  变址寄存器的内容是由用户设定的，在程序执行过程中其值可变，而指令字的形式地址A是不可变的，正好和基址寄存器相反。 EA = A + (IX)
优点1.扩大了操作数的寻址范围 2.非常适合处理数组问题和循环问题。
总结：一般来说 变址寻址常和其他寻址方式混合在一起，如先间接寻址再变址寻址，EA = (A)+(IX)， 先变址寻址再间接寻址 EA = (A + (IX))
9.相对寻址  基址寻址 变址寻址 相对寻址都可以看成偏移寻址  相对寻址基于程序局部性原理。相对寻址的有效地址是将程勋计数器PC的内容与指令字中的形势地址A相加而成 EA = （PC） + A
用途1：用于转移类指令 转移后的目标地址与当前指令有一段距离，成为相对位移量，此位移量由指令字的形势地址给出，故A又称为位移量。位移量可正可负，通常用补码表示
用途2：用于编制浮动程序  某段程序在内存中经常变换位置。
在各种寻址方式中，指令的地址码字段可能的情况如下
1寄存器编号（寄存器间接寻址）
2设备端口地址（输入输出时，即IO指令)
3.存储器的单元地址（直接寻址，间接须知）
4.数值（立即寻址）
发明各种各样的寻址方式，以最大限度来压缩地址码的长度，为操作码留出空间。
CISC complex 多 大 不固定  但是RISC的寄存器多
RISC的主要特点
1.选取使用频率高的一些简单指令以及一些有用但不复杂的指令，让复杂指令的功能由使用频率高的简单指令组合实现。
2.指令长度固定，指令格式种类少，寻址方式种类少。
3只有取数存数指令访问存储器，其他指令操作都在寄存器中完成
4.CPU有多个通用寄存器
5.采用流水线技术 大部分指令在一个时钟周期内完成，采用超标量和超流水线技术，可使每条指令的平均执行时间小于一个时钟周期。
6.控制器采用组合逻辑控制，不受微程序控制
7采用优化的编译程序
CISC的特点
1.指令系统复杂庞大，指令数目一般多余200 - 300条
2指令长度不固定，指令格式种类多，寻址方式种类多。
3.可以访存的指令不受限制
4.80 % 的程序使用其20 % 的指令，因此CISC各指令的使用频率差距太大
5各种指令执行时间相差很大，大多数指令需多个时钟周期才能完成
6控制器大多数采用微程序控制
7难以优化编译生成高效的目标代码程序。
比较
1RISC比CISC更能提高计算机的运算速度， 寄存器多减少访问次数 指令数和寻址方式少，因此指令译码教快。
2RISC比CISC更有利于设计，降低成本，提高可靠性
3RISC比CISC更有效支持高级语言程序
指令字长是指指令中包含二进制代码的位数；机器字长是CPU一次能处理的数据长度，通常等于内部寄存器的位数；存储字长是一个存储单元存储的二进制代码（存储字）的长度。
对于二进制指令，若两个操作数都在寄存器中，称为RR型命令；若两个操作数都在储存器中，称为SS型命令。若一个操作数都在寄存器中，一个在存储器中，称为RS型命令
缓冲储存器cache，用来存放最近使用的数据，其内容和调动都是由硬件和操作系统完成的，因此不能作为指令的地址码，
控制存储器采用ROM结构，存放的是微程序，他对软件开发人员是透明的，不能作为指令的地址码。
CPU不能直接访问外存，如果所需的数据存放在外存，则需要先调入主存，而命令中只能使用主存地址。
中断隐指令并不是指令系统中一条真正的指令，它没有操作码，因此它是一种不允许，也不可能为用户使用的特殊指令。其所完成的操作主要是1.保存断点 2.关闭中断 3.引出中断服务程序
中央处理器
CPU的功能总结：
1控制器能自动的形成命令的地址，并能发出取指令的命令，将对应此地址的指令取到控制器中，称为指令控制。
2取到指令后，应该产生完成每条指令所需要的控制命令，称为操作控制
3控制命令产生后，需要对各种控制命令加以时间上的控制，称为时间控制
4.在执行过程中，可能需要进行算数计算和逻辑运算，称为数据加工
5.最后当然还有处理中断的能力，称为中断处理。
运算器中的寄存器
1.暂存寄存器：用于暂存从主存读来的数据，这个数据不能存放在通用寄存器中，否则会被破坏其原有内容，暂存寄存器对应用程序员是透明的。
2累加寄存器ACC 是一个通用寄存器 当运算器的算数逻辑单元ALU执行算术或逻辑运算事，为ALU提供一个工作区。累加器暂时存放ALU运算的结果信息。
3.通用寄存器 主要存放操作数和各种地址信息
4状态条件寄存器PSW 也叫程序状态字寄存器，保存算术指令和逻辑指令运行或测试的结果简历的各种条件码内容，入进位标志，溢出标志。这些标志位通常由一位触发器保存。
另外，状态条件寄存器还可以保存中断和系统工作状态等信息，以便使CPU和系统能及时了解机器运行状态和程序运行状态，。因此状态条件寄存器是一个由各种状态条件标志拼凑而成的寄存器。
控制器中的寄存器
1程序计数器PC  又成指令计数器。在程序开始执行前，必须将它的起始地址，即程序的第一条指令所在的内存单元送到pc。当执行指令时，cpu自动修改pc的内容，以便保存总是将要执行的下一条指令的地址。 应当具有寄存信息和计数两种功能。
2指令寄存器IR 指令寄存器用来保存当前正在执行的指令。当执行一条指令时，先把它从内存取到数据缓冲寄存器中，然后传送至指令寄存器。指令划分为操作码和地址码字段，由二进制数字组成。为了准确无误的执行该指令，必须对操作码进行测试，以便识别出所要求的操作。
指令译码器就是做这哥工作的。指令寄存器中操作码字段的输出就是指令译码器的输入。操作码已经译码，即可向操作控制器发出具体操作的特定信号。
3存储器数据寄存器MDR  也叫数据缓冲寄存器，用来暂时存放由主存读出的一条指令或一个数据字；存入时也是。
作用1.作为cpu 内存和外部设备直接信息传达的中转站  2.补偿cpu 内存和外部设备直接的操作速度上的差别 3.在单累加器结构的运算器中，存储器数据寄存器还可以兼作操作数寄存器。
4.存储器地址寄存器MAR 保存当前CPU访问的内存单元的地址。由于内存和cpu速度的差别，必须使用地址寄存器来保持地址信息，直到内存的读写操作完成。
用户可见寄存器指用户可以通过程序去访问的寄存器（通用寄存器 程序计数器）
IR，MAR, MDR是CPU的内部工作寄存器，在程序执行的过程中是自动赋值的，程序员无法对其操作，称为用户不可见寄存器。而程序 计算器用来存放的是下一条需要执行的指令，因而程序员可以通过转移指令，调动子程序等指令来改变其内容
CPU每取出并执行一条命令所需的全部时间，即cpu完成一条指令时间，称为指令周期。
指令周期被划分为几个不同的阶段，每个阶段所需要的时间称为机器周期，又称为CPU工作周期或基本周期，通常等于取指时间（或访存时间）。时钟周期是处理操作最基本的单位。
三种指令执行方案：1.单指令周期 对所有指令都选用相同的执行时间来完成。
2，多指令周期  3.流水线方案
信息流是根据指令要求依次访问的数据序列，在指令执行的不同阶段，要求访问的数据序列是不同的，而且对不同的指令他们的数据流往往也是不同的。
1取指周期。指令的地址由程序计数器PC给出。取指周期的操作为：按PC内容取出指令，并将PC内容递增。当出现转移情况时，指令地址在执行周期被修改。
2间址周期（并不是所有的指令的执行过程都会有间址周期） 为了取出操作数的有效地址，操作数的地址放在指令所对应的存储器中，然后到其所对应的的存储器中去取操作数。
3执行周期 不同指令的周期操作命令不一样
4中断周期
流水线的时钟周期应以最长的执行时间为准。
数据通路的功能就是实现CPU内部的运算器和寄存器，已经寄存器直接的数据交换。
基本结构两种方式：1.cpu内部总线方式 2.专用数据通路方式
常见数据桐庐的数据传送
1寄存器之前的数据传送 一般通过cpu内部总线
2主存与cpu之间的数据传送   一般通过cpu内部总线
3执行算术或逻辑运算 ALU是没有内部存储功能的组合电路 借用寄存器保存数据
控制单元的功能
1，微操作命令的分析
1执行周期  a加法指令 b存数指令
2中断周期
2.控制单元的功能
输入cu 1.指令寄存器 将指令的操作码送入cu进行译码  2.标志 根据上条指令的结果来产生相应 的控制信号 3时钟 4来自系统控制总线的控制信号 中断请求 dma请求等
输出cu的内容 1cpu内的控制信号 2送至系统控制总线的信号
流出的优化就是某些操作能不能并行操作 满足两个条件：1不相互 依赖 2使用不同的线路
同步控制方式 任何一条指令或指令中的任何一个微操作执行，都由事先确定且有统一基准时标的实训信号所控制的方式叫做同步控制
1.采用完全统一节拍的机器周期（定长方式）
2.采用不同节拍的机器周期（不定长方式）
3采用中央控制和局部控制相结合的方法
异步控制方式 不存在基准时标信号，没有固定的节拍和时钟同步
联合控制方式 两种的这种方案
实现控制单元CU的方式有两类 1组合逻辑控制 2微程序控制
微程序设计的概念：将一条机器指令编写成一个微程序，每一个微程序包含若干条微指令，每一条微指令对应几个微操作命令。把这些微程序存到一个控制存储器中，用寻找程序的方法来寻找微程序中的微指令。所以逐条执行每一条微指令，也就相应的完成了一条机器指令的全部操作。
微程序控制的相关概念
1微命令与微操作 一条机器指令可以分解成一个微操作序列，这些微操作是计算机中最基本不可再分解的操作。在微程序控制的计算机中，将控制部件想执行部件发出的各种控制命令称为微命令。他是构成控制序列的最小单位。
微命令和微操作是一一对应的，微命令是微操作的控制信号，微操作是微命令的执行过程。
2.微指令与微周期 微指令是若干微命令的集合，错发微指令的控制存储器的单元地址称为微地址。微指令包含两大部分的信息：
a 操作控制字段，又称微操作码字段，用于产生某一步操作所需的各种操作控制信号。
b 顺序控制字段，又称微地址字段，用于控制产生下一条要执行的微指令地址。
微周期指从控制存储器中读取一条微指令并执行相应的微操作所需的时间。
3.主存储器与控制存储器 主存储器用于存放程序和数据，在CPU外部，用RAM实现；控制存储器(CM 控存)用于存放微程序，在CPU内部，用ROM实现。
4程序与微程序 程序是指令的有序集合，用于完成特定的功能：微程序是微指令的有序结合，一条指令的功能由一段微程序来实现。
微指令的基本格式，分为两个字段，一个为操作控制字段，该字段发出各种控制信号;另一个为顺序控制字段，该字段可以指出下地址，以控制微指令序列的执行，类似于PC.
CPU周期和微指令周期一样长，将两者设计成相等，完全是为了保证整个机器控制信息的同步。
微指令的编码方式1直接编码 每一位代表一个微命令 不需要译码
2字段直接编码方式 把微指令的微命令字段分成若干小字段 
分段规则1互斥性微命令同一字段，相容性微命令在不同字段 2,每个小段中包含的信息位不能太多，否则将增加译码路线的复杂性和译码师姐3一般每个小段要留出一个状态，表示本段不发出任何指令
3字段间编码方式 一个字段的微命令需要另一个字段中的某些微命令来解释，由于不是靠字段直接译码发出的微命令，故称字段间接编码，又称隐式编码。
4混合编码方式 12 或13混合使用
后续微指令序列地址的形成
1，微指令的下地址字段直接给出，这种方式称断定方式
2根据机器指令的操作码形成。
3,增量计数法
4分支转移  操作控制字段 转移方式 专一地址
5由硬件产生微程序入口地址
微指令格式分为水平型微指令和垂直型两种
水平型 并行性好 执行指令需要的微指令数少 与机器指令差距大，用较短的微程序结构换取较长的微指令结构。
组合逻辑控制（硬布线逻辑控制） 基本门电路组合现实，速度快，指令功能的修改和扩展难。微程序控制相反
指令流水线
一条指令的执行需要经过三个阶段 取指令，译码，执行。 当使用指令流水线时，执行N条指令需要的时钟周期数为N+2.
采用常规标量单流水处理机（即处理机的度是1,）度是什么意思？
处理机的度为1就是常见的普通流水线。处理机的度大于1就是常说的超标量流水线，也就是某一个时间可以并发执行多条独立指令。
流水过程中会出现三种冲突
1.资源相关（结构相关，结构冒险） 多条指令进入流水线后在同一机器时钟周期使用了同一个功能部件所发生的冲突
解决方案：1 停顿一个时钟再启动 2增加一个存储器，将指令和数据放在两个存储器中
2.数据相关（数据冒险） 如果一个程序必须等前一条指令执行完毕，才能执行，那么这两天就是数据相关的
分为三类 写后读 读后写 写后写
什么技术可以解决数据相关？最简单的方式就是使操作延后，知道数据写入再去读。但是一般使用数据旁路技术来解决数据相关。
数据旁路技术：设置相关专用通路，即不等前一条指令把计算结果写回寄存器组，而是直接把前一条指令的计算结果作为输入数据给下一条需要此结果的指令，使本来需要暂停的操作变得可以继续执行。
3.控制相关（控制冒险） 是由转移指令引起的，当执行转移指令时，根据转移条件的产生结果，可能顺序执行下一条指令；也可能转移到新的目标地址取指令，从而使流水线发生断流。
采用猜测法技术，机器先选定转移分支中的一个，按它取指并处理，条件码生成后，如果猜测正确，流水线继续下去，如果错误，之前的预取指令失效。
流水线的性能指标
1,吞吐量 单位时间所完成指令或输出结果的数量
2.加速比 不适用流水线所用的时间与使用流水线所用的时间之比称为流水线的加速比，
3流水线的效率 流水线的设备利用率E=n个任务占时空图的有效面积/n个任务所用的时间与k个流水段所围成的时空去的总面积
采用流水线方式执行指令时，总能在一个始终内完成一条指令的执行么？
不能。理想情况下，经过若干周期后，能在每个周期内完成一条指令，即CPI=1.但是当程序钟楚曦以下情况时，流水线被破坏，因而不能达到CPI=1.
1当有多条指令的不同阶段都要用到同一个功能部件时（资源冲突），后面指令要延时执行。
2当程序的执行流出发生改变时（控制相关），原来按顺序读出的指令无效。
3当后面指令的操作数是前面指令的运行结果是（数据相关）后面指令要延时执行。
超标量和动态流水线的基本概念
1超标量技术 超标量技术的每个时钟周期不像以前普通指令流水线只能执行一条指令的某个阶段，而是可以并发执行多条独立指令，为此就需要配置多个功能部件。
2超级流水线 典型流水线分为五步 超级流水线将机器指令划分为更多的操作
3超长指令字 由编译程序挖掘出指令潜在的并行性，将多条能并行操作的指令组合成一条具有多个操作码字段的超长指令字，为此要采用多个处理部件。
4动态流水线 多种运算可以同时进行，而静态流水线只能是一种运算进行完再进行下一种运算。
中断系统
当cpu执行完一条现行指令时，如果外部设备向cpu发出中断请求，那么cpu在满足相应条件的情况下，将发出中断响应信号，与此同时关闭中断（中断屏蔽触发器置为1）表示cpu不再受理另一个设备的中断。
这时cpu寻址中断请求源是哪一个设备，并保存CPU自己的程序计数器PC的内容。然后将转移到处理该中断源的中断服务程序。cpu在保存现场信息，设备服务以后，将恢复现场信息。
这些动作完成以后，开发中断（中断屏蔽触发装置0），并返回到原来被中断的主程序的下一条指令。
指令中断和操作系统中缺页中断的根本区别是什么？
指令周期被分为取指周期，间址周期，执行周期和中断周求。所以一定是在某条指令执行结束之后，才会去相应中断，中断之后继续执行下一条指令。
而缺页中断是指要访问的页不在主存，需要操作系统将其调入主存后再进行访问。 缺页中断执行之后，不是访问下一页，而是继续访问当前页。
多个中断源提出中断氢气时，中原系统必须按其优先顺序予以相应，这称为中断判优。可以硬件实现也可以软件实现。
中断服务程序入口地址怎么寻找：由于每个终端操作都需要对应的中断服务程序来完成，因此找到各个中断操作的中断服务程序入口地址至关重要  两种方法 硬件向量法和软件查询法
1，硬件向量法 利用硬件产生中断向量地址，再由向量地址找到入口地址。两种方法a cpu响应中断，只要将向量地址送至PC，执行这条指令，便可无条件的转向某服务程序的入口地址。
b 设置向量地址表，表在存储单元内，存储单元的地址为向量地址，存储单元的内容为中断服务程序入口地址，即终端箱了。只要访问向量地址所指示的存储单元，便可获得入口地址。
CPU在什么条件，什么时候，以什么方式来相应中断
1允许中断触发器EINT，它可被开中断指令置1，也可以被关中断置0.CPU要满足条件才相应中断，当EINT=1，且有中断请求时，cpu才可以相应中断。
2 cpu在指令执行周期结束后，才会去查询是否有中断。如果有进入中断周期；如果没有，则进入下一条指令的取指周期。
3 cpu要相应中断，就必须进入中断周期，一旦进入中断周期，即由中断隐指令（硬件自动）完成下列操作：
a保护程序断点  就是将当前程序计数器PC的内容保存到存储器中。它可以存在存储器的特定单元内，也可以存入堆栈。
b寻找中断服务程序入口地址  两种方法 硬件向量法和软件查询法
c关中断 cpu进入中断周期意味着cpu响应了某个中断源的请求，为了确保cpu相应该中断后所做的一系列操作不至于再受到新的中断请求的干扰，在该中断周期内必须自动关中断，以禁止cpu再次相应新的中断请求。
虽然中断隐指令有指令两字，但实际上它不属于系统指令，他是cpu在中断周期内硬件自动完成的一条指令。
在中断处理过程中又出现了新的中断请求，两种方式解决 1 不予理会 2考虑优先级 这种方式叫多重中断
当cpu正在执行某个中断服务程序时，另一个中断源又提出了新的中断请求，而cpu又相应了这个新的请求，于是暂停政治运行的中断服务程序，转去执行新的中断服务程序，称为多重中断，又称为中断嵌套。
1多重中断需要满足两大条件 a开中断是服务程序结束之后才有的，不然不予相应任何中断，所以必须要满足第一个条件结束提前设置开中断指令，开中断指令的位置决定了cpu能否实现多重中断
b只有优先级别更高的中断请求源，才可以中断比其级别低的中断服务程序，所以必须满足优先级别搞的中断源有权中断优先级别低的中断源。为了保证级别低的中断源不干扰级别高的中断源的中断处理过程，可采用屏蔽技术。
2屏蔽技术 每个中断请求触发器都有一个屏蔽触发器，将所有屏蔽触发器组合在一起，便构成了一个屏蔽寄存器。屏蔽寄存器的内容称为屏蔽字（又叫屏蔽码）。每个中断源都对应一个屏蔽字。
什么时候置屏蔽字合适呢？由于只要中断一开，就运行中断嵌套，因此设置屏蔽字的指令必须安排在中断服务程序的开中断命令之前。
优先级分为响应优先级和处理优先级。
响应优先级指CPU响应各中断源请求的优先次序。这种次序往往是硬件电路已设置好的，不便于改动。
处理优先级指CPU实际对各中断源请求的优先次序，可以通过屏蔽技术来改变处理优先次序。若不采用屏蔽技术，则响应的优先次序就是处理的优先次序。
cpu控制器主要由三个部件组成：指令寄存器 程序计数器和操作控制器
指令译码器又称为操作码译码器，暂存在指令译码器中的指令只有在其操作码经过译码之后才能识别出这是一条什么指令，并产生相应的控制信号提供给微操作信号发生器。
三级时序系统包括机器周期，节拍和工作脉冲。
中央控制与局部控制相结合的方式可以将执行周期需要更多时钟周期的指令安排局部控制节拍，并将其插入到中央控制的执行周期内。
由于微指令是存放做控制存储器中的，所以应当从控制存储器读取微指令。
