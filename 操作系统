进程与线程
1.进程
2.线程
用户级线程  内核线程  混合实现   调度程序激活机制  弹出式线程
3.进程间通信
互斥解决
1.屏蔽终端 2.锁变量 3.严格轮换法 4.perterson  5.tsl
睡眠与唤醒
1. 信号量  2.互斥量
管程
消息传递
屏蔽
避免锁 : 读 - 复制 - 更新
	4.调度

	内存管理
	1.无存储器抽象
	在不使用存储抽象的情况下运行多个程序
	世界的发展总是倾向于重复历史
	2.一种存储器抽象：地址空间
	基址寄存器和界限寄存器
	两种处理内存超载的方法：交换和虚拟内存
	两种方法跟踪内存使用情况：位图和空闲区链表
	3.虚拟内存：覆盖
	分页  页表：通过页表可以把虚拟地址中的虚拟页面域替换成页框域，从而形成物理地址。
	虚拟内存本质上是用来创造一个新的抽象概念——地址空间
	1.加速分页过程 tlb translation lookaside buffer 相联存储器  快表
	软件tlb管理
	2.针对大内存的页表: 多级页表：页目录指针表 = 4级页表;倒排页表 
	4.页面置换算法
    5.系统中的设计问题
	局部分配策略和全局分配策略
	负载控制
	页面大小
	分离的指令空间和数据空间
	共享页面
	共享库
	内存映射文件
	消除策略
	虚拟内存接口
	6.有关实现的问题
	7.分段

文件系统
文件是进程创建的信息逻辑单元。 
文件存储实现的关键问题是记录各个文件分别用到哪些磁盘块：1.连续分配 2.链表分配 3.采用内存中的表进行链表分配 文件分配表FAT 4.i节点
日志结构文件系统LFS
日志文件系统
虚拟文件系统
磁盘空间管理 1.块大小 2.记录空闲块 3.磁盘配额
文件系统性能
1.高速缓存 块高速缓存或者缓冲区高速缓存
2.块提前读
3.减少磁盘臂运动

输入输出
1.I/O设备：块设备和字符设备
2.设备控制器(适配器)  控制器的任务是把串行的位流转换位字节块，并进行必要的错误校正工作。
3.内存映射I/O 
cpu如何与设备的控制寄存器和数据缓冲区进行通信？1.每个控制寄存器被分配一个I/O端口号。所有I/O端口形成I/O端口空间。2.每个控制寄存器被分配唯一的一个内存地址，并且不会有内存被分配这一地址，这样的系统称为内存映射I/O。
4.直接存储器存取DMA
5.中断 中断信号导致CPU停止当前正在做的工作并且开始做其他的事情。地址线上的数字被用做指向一个称为中断向量的表格的索引，以便读取一个新的程序计数器。
精确中断和不精确中断
I/O软件原理
目标： 设备独立性 错误处理  同步和异步传输 缓冲
1.程序控制I/O    轮询 忙等待
2.中断驱动I/O 
3.使用DMA的I/O
I/O软件层次
1.中断处理程序
2.设备驱动程序
3.与设备无关的I/O软件
(1)设备驱动程序的统一接口
(2)缓冲  双缓冲  循环缓冲区
(3)错误报告 编程错误 实际的I/O错误
(4)分配与释放专用设备                             
(5)与设备无关的块大小
4.用户空间的I/O软件   系统调用通常由库过程实现 另一个类别是假脱机系统。 另一个方法是创建一个特殊进程(守护进程)
RAID廉价磁盘冗余阵列
磁盘在使用之前，每个盘片必须经受由软件完成的低级格式化。
单交错 双交错
当电源打开时，bios最先运行，他读入主引导记录并跳转到主引导记录。然后这一引导程序进行检查以了解哪个分区是活动的。引导扇区包含一个小的程序，它一般会装入一个较大的引导程序装载器，该引导程序装在其将搜索文件系统以找到操作系统内核，该程序被装入内存并执行。
磁盘臂调度算法 电梯算法
错误处理 替换
稳定存储器 
时钟 定时器
时钟硬件：晶体振荡器 计数器和储存寄存器 
功能1.维持正确的日时间 2.防止进程超时运行  3.CPU记账
输出软件
1.文本窗口  2.X窗口系统 3.图形用户界面 GUI  4.位图 5.字体  6.触摸屏 电阻屏 电容屏
私锁
1.资源  可抢占资源和不可抢占资源
鸵鸟算法
死锁检测和死锁恢复
1.利用抢占恢复  2.利用回滚恢复  3.通过杀死进程恢复 
云
1.按需自助服务 2普适的网络访问 3资源池 4快速可伸缩 5服务可计量
云的功能是提供一个用户可以直接访问并任意使用的虚拟机。
热迁移 检查点
1.共事者病毒
2.可执行程序病毒
3，内存驻留病毒
4.引导扇区病毒
5.设备驱动病毒
6.宏病毒
7.源代码病毒
linux 最小惊讶原理 
进程描述符的信息大概分为几类：1.调度参数 2.内存映射 3.信号 4.机器寄存器 5.系统调用状态 6.文件描述符表 7.统计数据 8.内核堆栈 9.其他
创建一个新进程的机制非常简单。为子进程创建一个新的进程描述符和用户空间，然后从父进程复制大量的内容。这个子进程被赋予一个PID，并建立它的内存映射，同时它也被赋予了访问属于父进程文件的权限，它的寄存器内容被初始化并准备运行
进程是资源容器，而线程是执行单元。
linux系统的线程是内核线程，所以linux系统的调度是基于线程的而不是进程的。
为了进行调度，linux将线城区分成三类1.实时先入先出 2.实时轮转 3.分时。
